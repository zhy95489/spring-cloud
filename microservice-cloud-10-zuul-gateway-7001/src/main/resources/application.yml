server:
  port: 7001 # 服务端口



eureka:
  client:
    registerWithEureka: true # 服务注册开关
    fetchRegistry: true # 服务发现开关
    serviceUrl: # 客户端(服务提供者)注册到哪一个Eureka Server服务注册中心，多个用逗号分隔
      # 单机版 Eureka 服务注册中心
      #defaultZone: http://localhost:6001/eureka
      # 集群版 Eureka 服务注册中心
      defaultZone: http://eureka6001.com:6001/eureka,http://eureka6002.com:6002/eureka
  instance:
    instanceId: ${spring.application.name}:${server.port} # 指定实例ID,就不会显示主机名了
    preferIpAddress: true #访问路径可以显示IP地址
spring:
  application:
    name: microservice-zuul-gateway
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource # 当前数据源操作类型
    driver-class-name: com.mysql.cj.jdbc.Driver # mysql驱动包
    url: jdbc:mysql://localhost:3306/springcloud_db01?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=UTF-8 # 数据库名称
#    url: jdbc:mysql://192.168.31.242:3306/springcloud_db01?serverTimezone=GMT%2B8 # 数据库名称
    username: root
    password: root
#    driver-class-name: com.mysql.cj.jdbc.Driver # mysql驱动包
#    url: jdbc:oracle:thin:@192.168.31.242:1521:helowin # 数据库名称
#    username: zhy
#    password: zhy
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
          # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    dbcp2:
      min-idle: 5 # 数据库连接池的最小维持连接数
      initial-size: 5 # 初始化连接数
      max-total: 5 # 最大连接数
      max-wait-millis: 150 # 等待连接获取的最大超时时间

mybatis:
  #开启驼峰命名法
  configuration:
    map-underscore-to-camel-case: true
mybatis-plus:
  # xml地址
  mapper-locations: classpath:mapper/*Mapper.xml
  # 实体扫描，多个package用逗号或者分号分隔
  #type-aliases-package: ***   #自己的实体类地址
  configuration:
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

swagger:
  base-package: com.laozhu

zuul:
  routes:
    provider-product: #路由名称，名称任意，路由名称唯一
      path: /product/** #访问路径
      serviceId: microservice-product #指定服务ID，会自动从eureka中找到此服务的ip和端口号
      stripPrefix: false #代理转发时去掉前缀，false：代理转发时不去掉前缀，为true时请求 /product/get/1，代理转发到/get/1

      # 如果多个服务需要经过路由，则同povider-product方式继续添加，例如：
      #provider-order:
      #path: /order/**
      #serviceId: microservice-order
      #stripPrefix: false
